"use strict";(self.webpackChunknachawati_github_io=self.webpackChunknachawati_github_io||[]).push([[1508],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(r),u=n,f=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return r?a.createElement(f,o(o({ref:t},l),{},{components:r})):a.createElement(f,o({ref:t},l))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1848:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=r(7462),n=(r(7294),r(3905)),i=r(9943);const o={title:"Workaround for Differences Between Node.js and Web Tree-sitter APIs",authors:"nachawati",tags:["node","parsing","wasm","web","webassembly"],image:"/img/casadi.png"},s=void 0,p={permalink:"/blog/2023/08/17/tree-sitter-api-differences-node-and-web-workaround",source:"@site/blog/2023-08-17-tree-sitter-api-differences-node-and-web-workaround.mdx",title:"Workaround for Differences Between Node.js and Web Tree-sitter APIs",description:"Tree-sitter is great tool for building incremental and error-tolerant parsers for use in compilers, IDEs and code analyzers, which can also run directly in the browser. Unlike ANTLR, which is a popular open-source LL(*) parser generator, tree-sitter is a GLR parser generator that's similar but more powerful than the LALR parser generator YACC that we all were forced to learn back in CS 440 \ud83d\ude05.",date:"2023-08-17T00:00:00.000Z",formattedDate:"August 17, 2023",tags:[{label:"node",permalink:"/blog/tags/node"},{label:"parsing",permalink:"/blog/tags/parsing"},{label:"wasm",permalink:"/blog/tags/wasm"},{label:"web",permalink:"/blog/tags/web"},{label:"webassembly",permalink:"/blog/tags/webassembly"}],readingTime:1.175,hasTruncateMarker:!1,authors:[{name:"Mohamad Omar Nachawati",title:"Research Software Engineer",url:"https://nachawati.me",email:"mnachawa@gmail.com",imageURL:"/img/image.svg",key:"nachawati"}],frontMatter:{title:"Workaround for Differences Between Node.js and Web Tree-sitter APIs",authors:"nachawati",tags:["node","parsing","wasm","web","webassembly"],image:"/img/casadi.png"},nextItem:{title:"Compiling CasADi to WebAssembly",permalink:"/blog/2023/08/08/compiling-casadi-webassembly"}},c={authorsImageUrls:[void 0]},l=[],m={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://tree-sitter.github.io/tree-sitter/"},"Tree-sitter")," is great tool for building incremental and error-tolerant parsers for use in compilers, IDEs and code analyzers, which can also run directly in the browser. Unlike ",(0,n.kt)("a",{parentName:"p",href:"https://www.antlr.org/"},"ANTLR"),", which is a popular open-source ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/LL_parser"},"LL(*) parser")," generator, tree-sitter is a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/GLR_parser"},"GLR parser")," generator that's similar but more powerful than the ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/LALR_parser"},"LALR parser")," generator ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Yacc"},"YACC")," that we all were forced to learn back in ",(0,n.kt)("a",{parentName:"p",href:"https://cs.gmu.edu/~white/CS440/"},"CS 440")," \ud83d\ude05."),(0,n.kt)("p",null,"It's also nice that tree-sitter is open-source, unlike the closed-source ",(0,n.kt)("a",{parentName:"p",href:"https://www.bottlecaps.de/rex/"},"REx Parser Generator")," that I used to generate the ",(0,n.kt)("a",{parentName:"p",href:"https://www.jsoniq.org/"},"JSONiq")," parser for the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/nachawati/unity"},"Unity DGMS")," analytics engine (from the ",(0,n.kt)("a",{parentName:"p",href:"https://www.jsoniq.org/grammars/jq++.ebnf"},"ebnf grammar"),"). I guess it can be a bit disquieting for a project to depend on ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/__Gunther__"},"Gunther Rademacher")," to continuing maintaining his REx web service \ud83d\ude2c."),(0,n.kt)("p",null,"Recently, however, I ran into a problem with tree-sitter when trying to reuse TypeScript code for both Node.js and the Web. Although both of these tree-sitter API implementations can be called separately from TypeScript (or JavaScript), slight differences prevents seamlessly interchanging them in a cross-platform build. Until this problem is properly fixed, I've developed a simple workaround that provides a unified tree-sitter API for both Node.js and the Web."),(0,n.kt)("p",null,"To use it, simply import this ",(0,n.kt)("a",{parentName:"p",href:"https://gist.github.com/nachawati/351cba7c0b9adff2b75a2fafe3e73ac3#file-tree-sitter-api-ts"},"Gist")," in any common module that processes tree-sitter ",(0,n.kt)("inlineCode",{parentName:"p"},"SyntaxNode"),"s. Please note that this workaround does not eliminate the need for Node.js- and Web- specific loading and initialization of the tree-sitter API and languages."),(0,n.kt)(i.Z,{id:"351cba7c0b9adff2b75a2fafe3e73ac3",mdxType:"Gist"}))}u.isMDXComponent=!0},9943:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(7294);function n(e,t){return n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(e,t)}const i=function(e){var t,r;function i(){return e.apply(this,arguments)||this}r=e,(t=i).prototype=Object.create(r.prototype),t.prototype.constructor=t,n(t,r);var o=i.prototype;return o.componentDidMount=function(){this._updateIframeContent()},o.componentDidUpdate=function(e,t){this._updateIframeContent()},o._defineUrl=function(){var e=this.props,t=e.id,r=e.file;return"https://gist.github.com/"+t+".js"+(r?"?file="+r:"")},o._updateIframeContent=function(){var e=this.props,t=e.id,r=e.file,a=this.iframeNode,n=a.document;a.contentDocument?n=a.contentDocument:a.contentWindow&&(n=a.contentWindow.document);var i='<html><head><base target="_parent"><style>*{font-size:12px;}</style></head><body '+("onload=\"parent.document.getElementById('"+(r?"gist-"+t+"-"+r:"gist-"+t)+"').style.height=document.body.scrollHeight + 'px'\"")+">"+('<script type="text/javascript" src="'+this._defineUrl()+'"><\/script>')+"</body></html>";n.open(),n.writeln(i),n.close()},o.render=function(){var e=this,t=this.props,r=t.id,n=t.file;return a.createElement("iframe",{ref:function(t){e.iframeNode=t},width:"100%",frameBorder:0,id:n?"gist-"+r+"-"+n:"gist-"+r})},i}(a.PureComponent)}}]);