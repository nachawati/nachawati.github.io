"use strict";(self.webpackChunknachawati_github_io=self.webpackChunknachawati_github_io||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/08/08/compiling-casadi-webassembly","metadata":{"permalink":"/blog/2023/08/08/compiling-casadi-webassembly","source":"@site/blog/2023-08-08-compiling-casadi-webassembly.md","title":"Compiling CasADi to WebAssembly","description":"Today I revisited CasADi to see if I could use emscripten to compile it to a WebAssembly and run it inside of a Web browser. CasADi is an awesome tool for performing symbolic computation and automatic differentiation, among other things. It also provides interfaces to popular open-source solvers, such as the MINLP solver BONMIN.","date":"2023-08-08T00:00:00.000Z","formattedDate":"August 8, 2023","tags":[{"label":"casadi","permalink":"/blog/tags/casadi"},{"label":"wasm","permalink":"/blog/tags/wasm"},{"label":"webassembly","permalink":"/blog/tags/webassembly"}],"readingTime":1.07,"hasTruncateMarker":false,"authors":[{"name":"Mohamad Omar Nachawati","title":"Research Software Engineer","url":"https://nachawati.me","email":"mnachawa@gmail.com","imageURL":"/img/image.svg","key":"nachawati"}],"frontMatter":{"title":"Compiling CasADi to WebAssembly","authors":"nachawati","tags":["casadi","wasm","webassembly"],"image":"/img/casadi.png"}},"content":"Today I revisited [CasADi](https://web.casadi.org/) to see if I could use [emscripten](https://emscripten.org/) to compile it to a WebAssembly and run it inside of a Web browser. CasADi is an awesome tool for performing [symbolic computation](https://en.wikipedia.org/wiki/Computer_algebra) and [automatic differentiation](https://en.wikipedia.org/wiki/Automatic_differentiation), among other things. It also provides interfaces to popular open-source solvers, such as the MINLP solver [BONMIN](https://www.coin-or.org/Bonmin/).\\n\\nI had previously used CasADi during my PhD to implement a grey-box algorithmic framework that I had designed and aptly named GreyOpt ([paper](https://www.scitepress.org/PublishedPapers/2021/103501/103501.pdf), [slides](http://mason.gmu.edu/~mnachawa/icores2021-slides.pdf)). I also used CasADi for implementing the main backend of [Unity DGMS](https://github.com/nachawati/unity), an open-source JSONiq analytics engine. I thought it would be interesting to see if at least some functionality could be easily ported to run directly in the browser.\\n\\nIt was fairly easy to add a new executable target in [CMAKE](https://cmake.org/), along with a simple C API that wrapped some functions for constructing symbolic variables and for performing basic symbolic arithmetic. I initially got some compilation errors stemming from an issue with some preprocessor directives that conditionally enabled the `pack` and `unpack` methods for `unsigned int&` arguments based on the value of `SIZE_MAX` (WASM support is currently only 32-bit).\\n\\nAfter resolving those errors, the build and linking of the CasADi WebAssembly completed successfully. Now I can use CasADi to do computer algebra in Chromium ;-)"}]}')}}]);