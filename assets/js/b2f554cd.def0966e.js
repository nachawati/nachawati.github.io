"use strict";(self.webpackChunknachawati_github_io=self.webpackChunknachawati_github_io||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/08/17/tree-sitter-api-differences-node-and-web-workaround","metadata":{"permalink":"/blog/2023/08/17/tree-sitter-api-differences-node-and-web-workaround","source":"@site/blog/2023-08-17-tree-sitter-api-differences-node-and-web-workaround.mdx","title":"Workaround for Differences Between Node.js and Web Tree-sitter APIs","description":"Tree-sitter is great tool for building incremental and error-tolerant parsers for use in compilers, IDEs and code analyzers, which can also run directly in the browser. Unlike ANTLR, which is a popular open-source LL(*) parser generator, tree-sitter is a GLR parser generator that\'s similar but more powerful than the LALR parser generator YACC that we all were forced to learn back in CS 440 \ud83d\ude05.","date":"2023-08-17T00:00:00.000Z","formattedDate":"August 17, 2023","tags":[{"label":"node","permalink":"/blog/tags/node"},{"label":"parsing","permalink":"/blog/tags/parsing"},{"label":"wasm","permalink":"/blog/tags/wasm"},{"label":"web","permalink":"/blog/tags/web"},{"label":"webassembly","permalink":"/blog/tags/webassembly"}],"readingTime":1.175,"hasTruncateMarker":false,"authors":[{"name":"Mohamad Omar Nachawati","title":"Research Software Engineer","url":"https://nachawati.me","email":"mnachawa@gmail.com","imageURL":"/img/image.svg","key":"nachawati"}],"frontMatter":{"title":"Workaround for Differences Between Node.js and Web Tree-sitter APIs","authors":"nachawati","tags":["node","parsing","wasm","web","webassembly"],"image":"/img/tree-sitter-small.png"},"nextItem":{"title":"Compiling CasADi to WebAssembly","permalink":"/blog/2023/08/08/compiling-casadi-webassembly"}},"content":"[Tree-sitter](https://tree-sitter.github.io/tree-sitter/) is great tool for building incremental and error-tolerant parsers for use in compilers, IDEs and code analyzers, which can also run directly in the browser. Unlike [ANTLR](https://www.antlr.org/), which is a popular open-source [LL(*) parser](https://en.wikipedia.org/wiki/LL_parser) generator, tree-sitter is a [GLR parser](https://en.wikipedia.org/wiki/GLR_parser) generator that\'s similar but more powerful than the [LALR parser](https://en.wikipedia.org/wiki/LALR_parser) generator [YACC](https://en.wikipedia.org/wiki/Yacc) that we all were forced to learn back in [CS 440](https://cs.gmu.edu/~white/CS440/) \ud83d\ude05.\\n\\nIt\'s also nice that tree-sitter is open-source, unlike the closed-source [REx Parser Generator](https://www.bottlecaps.de/rex/) that I used to generate the [JSONiq](https://www.jsoniq.org/) parser for the [Unity DGMS](https://github.com/nachawati/unity) analytics engine (from the [ebnf grammar](https://www.jsoniq.org/grammars/jq++.ebnf)). I guess it can be a bit disquieting for a project to depend on [Gunther Rademacher](https://twitter.com/__Gunther__) to continuing maintaining his REx web service \ud83d\ude2c.\\n\\nRecently, however, I ran into a problem with tree-sitter when trying to reuse TypeScript code for both Node.js and the Web. Although both of these tree-sitter API implementations can be called separately from TypeScript (or JavaScript), slight differences prevents seamlessly interchanging them in a cross-platform build. Until this problem is properly fixed, I\'ve developed a simple workaround that provides a unified tree-sitter API for both Node.js and the Web.\\n\\nTo use it, simply import this [Gist](https://gist.github.com/nachawati/351cba7c0b9adff2b75a2fafe3e73ac3#file-tree-sitter-api-ts) in any common module that processes tree-sitter `SyntaxNode`s. Please note that this workaround does not eliminate the need for Node.js- and Web- specific loading and initialization of the tree-sitter API and languages.\\n\\nimport Gist from \'react-gist\';\\n\\n<Gist id=\\"351cba7c0b9adff2b75a2fafe3e73ac3\\" \\n/>"},{"id":"/2023/08/08/compiling-casadi-webassembly","metadata":{"permalink":"/blog/2023/08/08/compiling-casadi-webassembly","source":"@site/blog/2023-08-08-compiling-casadi-webassembly.md","title":"Compiling CasADi to WebAssembly","description":"Today I revisited CasADi to see if I could use emscripten to compile it to a WebAssembly and run it inside of a Web browser. CasADi is an awesome tool for performing symbolic computation and automatic differentiation, among other things. It also provides interfaces to popular open-source solvers, such as the MINLP solver BONMIN.","date":"2023-08-08T00:00:00.000Z","formattedDate":"August 8, 2023","tags":[{"label":"casadi","permalink":"/blog/tags/casadi"},{"label":"wasm","permalink":"/blog/tags/wasm"},{"label":"webassembly","permalink":"/blog/tags/webassembly"}],"readingTime":1.07,"hasTruncateMarker":false,"authors":[{"name":"Mohamad Omar Nachawati","title":"Research Software Engineer","url":"https://nachawati.me","email":"mnachawa@gmail.com","imageURL":"/img/image.svg","key":"nachawati"}],"frontMatter":{"title":"Compiling CasADi to WebAssembly","authors":"nachawati","tags":["casadi","wasm","webassembly"],"image":"/img/casadi.png"},"prevItem":{"title":"Workaround for Differences Between Node.js and Web Tree-sitter APIs","permalink":"/blog/2023/08/17/tree-sitter-api-differences-node-and-web-workaround"}},"content":"Today I revisited [CasADi](https://web.casadi.org/) to see if I could use [emscripten](https://emscripten.org/) to compile it to a WebAssembly and run it inside of a Web browser. CasADi is an awesome tool for performing [symbolic computation](https://en.wikipedia.org/wiki/Computer_algebra) and [automatic differentiation](https://en.wikipedia.org/wiki/Automatic_differentiation), among other things. It also provides interfaces to popular open-source solvers, such as the MINLP solver [BONMIN](https://www.coin-or.org/Bonmin/).\\n\\nI had previously used CasADi during my PhD to implement a grey-box algorithmic framework that I had designed and aptly named GreyOpt ([paper](https://www.scitepress.org/PublishedPapers/2021/103501/103501.pdf), [slides](http://mason.gmu.edu/~mnachawa/icores2021-slides.pdf)). I also used CasADi for implementing the main backend of [Unity DGMS](https://github.com/nachawati/unity), an open-source JSONiq analytics engine. I thought it would be interesting to see if at least some functionality could be easily ported to run directly in the browser.\\n\\nIt was fairly easy to add a new executable target in [CMAKE](https://cmake.org/), along with a simple C API that wrapped some functions for constructing symbolic variables and for performing basic symbolic arithmetic. I initially got some compilation errors stemming from an issue with some preprocessor directives that conditionally enabled the `pack` and `unpack` methods for `unsigned int&` arguments based on the value of `SIZE_MAX` (WASM support is currently only 32-bit).\\n\\nAfter resolving those errors, the build and linking of the CasADi WebAssembly completed successfully. Now I can use CasADi to do computer algebra in Chromium ;-)"}]}')}}]);