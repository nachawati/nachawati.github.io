<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nachawati.me/blog</id>
    <title>Dr. Mohamad Omar Nachawati Blog</title>
    <updated>2023-08-08T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nachawati.me/blog"/>
    <subtitle>Dr. Mohamad Omar Nachawati Blog</subtitle>
    <icon>https://nachawati.me/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Compiling CasADi to WebAssembly]]></title>
        <id>https://nachawati.me/blog/2023/08/08/compiling-casadi-webassembly</id>
        <link href="https://nachawati.me/blog/2023/08/08/compiling-casadi-webassembly"/>
        <updated>2023-08-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Today I revisited CasADi to see if I could use emscripten to compile it to a WebAssembly and run it inside of a Web browser. CasADi is an awesome tool for performing symbolic computation and automatic differentiation, among other things. It also provides interfaces to popular open-source solvers, such as the MINLP solver BONMIN.]]></summary>
        <content type="html"><![CDATA[<p>Today I revisited <a href="https://web.casadi.org/" target="_blank" rel="noopener noreferrer">CasADi</a> to see if I could use <a href="https://emscripten.org/" target="_blank" rel="noopener noreferrer">emscripten</a> to compile it to a WebAssembly and run it inside of a Web browser. CasADi is an awesome tool for performing <a href="https://en.wikipedia.org/wiki/Computer_algebra" target="_blank" rel="noopener noreferrer">symbolic computation</a> and <a href="https://en.wikipedia.org/wiki/Automatic_differentiation" target="_blank" rel="noopener noreferrer">automatic differentiation</a>, among other things. It also provides interfaces to popular open-source solvers, such as the MINLP solver <a href="https://www.coin-or.org/Bonmin/" target="_blank" rel="noopener noreferrer">BONMIN</a>.</p><p>I had previously used CasADi during my PhD to implement a grey-box algorithmic framework that I had designed and aptly named GreyOpt (<a href="https://www.scitepress.org/PublishedPapers/2021/103501/103501.pdf" target="_blank" rel="noopener noreferrer">paper</a>, <a href="http://mason.gmu.edu/~mnachawa/icores2021-slides.pdf" target="_blank" rel="noopener noreferrer">slides</a>). I also used CasADi for implementing the main backend of <a href="https://github.com/nachawati/unity" target="_blank" rel="noopener noreferrer">Unity DGMS</a>, an open-source JSONiq analytics engine. I thought it would be interesting to see if at least some functionality could be easily ported to run directly in the browser.</p><p>It was fairly easy to add a new executable target in <a href="https://cmake.org/" target="_blank" rel="noopener noreferrer">CMAKE</a>, along with a simple C API that wrapped some functions for constructing symbolic variables and for performing basic symbolic arithmetic. I initially got some compilation errors stemming from an issue with some preprocessor directives that conditionally enabled the <code>pack</code> and <code>unpack</code> methods for <code>unsigned int&amp;</code> arguments based on the value of <code>SIZE_MAX</code> (WASM support is currently only 32-bit).</p><p>After resolving those errors, the build and linking of the CasADi WebAssembly completed successfully. Now I can use CasADi to do computer algebra in Chromium ;-)</p>]]></content>
        <author>
            <name>Mohamad Omar Nachawati</name>
            <email>mnachawa@gmail.com</email>
            <uri>https://nachawati.me</uri>
        </author>
        <category label="casadi" term="casadi"/>
        <category label="wasm" term="wasm"/>
        <category label="webassembly" term="webassembly"/>
    </entry>
</feed>